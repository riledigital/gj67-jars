ctjsVersion: 1.5.0
notes: '    /* empty */'
libs:
  keyboard.polyfill: {}
  sound.howler: {}
  fittoscreen:
    mode: scaleFit
  mouse: {}
  place:
    undefined: ''
    gridX: 512
    gridY: 512
    debugMode: false
    debugText: 16
  random: {}
textures:
  - name: ui_circle
    untill: 0
    grid:
      - 1
      - 1
    axis:
      - 32
      - 32.666666666666664
    marginx: 0
    marginy: 0
    imgWidth: 64
    imgHeight: 64
    width: 64
    height: 64
    offx: 0
    offy: 0
    origname: i63670f7a-7d5a-4565-b27c-a8829746df29.png
    shape: circle
    left: 0
    right: 64
    top: 0
    bottom: 64
    uid: 63670f7a-7d5a-4565-b27c-a8829746df29
    padding: 1
    source: >-
      /Users/riledigital/Downloads/kenney_scribbleplatformer/PNG/Default/ui_circle.png
    r: 30
    lastmod: 1605325943701
  - name: ui_button
    untill: 0
    grid:
      - 1
      - 1
    axis:
      - 32
      - 32
    marginx: 0
    marginy: 0
    imgWidth: 64
    imgHeight: 64
    width: 64
    height: 64
    offx: 0
    offy: 0
    origname: i55a2013a-de91-4ee2-be15-9ee1b3b6af54.png
    shape: strip
    left: 0
    right: 64
    top: 0
    bottom: 64
    uid: 55a2013a-de91-4ee2-be15-9ee1b3b6af54
    padding: 1
    source: >-
      /Users/riledigital/Downloads/kenney_scribbleplatformer/PNG/Default/ui_button.png
    lastmod: 1605403440869
    r: 32
    stripPoints:
      - x: 0
        'y': -32
      - x: 30
        'y': -10
      - x: 34
        'y': 34
      - x: 2
        'y': 35
      - x: -32
        'y': 31
      - x: -30
        'y': -10
      - x: -69.70520231213875
        'y': -20.416184971098247
      - x: -63.300578034682104
        'y': -54.04624277456646
      - x: -52.728323699421985
        'y': -84.26589595375721
      - x: -11.965317919075165
        'y': -67.22543352601154
    closedStrip: true
    symmetryStrip: true
skeletons: []
types:
  - name: Lid
    depth: 0
    oncreate: |-
      // this.gravity = .1;
      // TODO skip this 4 later
      const colorVariant = "RED";
      this.selected = false;
      this.lidSize = ct.random.range(.5, 1.5);
      this.scale = new PIXI.Point(this.lidSize, this.lidSize);
      this.zIndex = 100
    onstep: >-
      //  Handle mouseevents 

      ct.room.holdingLid = false;


      if (!ct.room.holdingLid && this.selected) {
          this.x = ct.mouse.x;
          this.y = ct.mouse.y;
      } 

      // console.log(ct.room.draggingCopies);

      // we aren't using actions here because actions wanst made for direct
      mouse coordinate input

      if (!ct.room.holdingLid && ct.mouse.down && ct.mouse.hovers(this)) {
          ct.room.holdingLid = true;
          this.selected = true;
      } else {
          ct.room.holdingLid = false;
          this.selected = false;
      }


      // Pixels

      const ERROR_MARGIN_POS = 5;

      // floats

      const ERROR_MARGIN_SIZE = 0.02;

      var collidedJar = ct.place.meet(this, 'Jar');

      if (ct.mouse.released && collidedJar) {
          console.log(`${collidedJar?.jarSize}, ${this.lidSize}`);
          if ((collidedJar.jarSize - this.lidSize <= ERROR_MARGIN_SIZE) 
          && (Math.abs(collidedJar.x - this.x) <= ERROR_MARGIN_POS) && 
          (Math.abs(collidedJar.y - this.y) <= ERROR_MARGIN_POS)) {
              console.log("size match ")
          }
      }


      // use this to scale 

      // const scaleFactor = Math.random() * 3;

      this.move();
    ondraw: |-
      if (this.selected) {
          this.alpha = 0.5;
      } else {
          this.alpha = 1;
      }
    ondestroy: ''
    texture: 63670f7a-7d5a-4565-b27c-a8829746df29
    extends:
      ctype: lidGroup
      visible: true
    uid: 65fe333b-5a06-45ef-ab91-2187829b1255
    lastmod: 1605485640046
  - name: Jar
    depth: 0
    oncreate: |-
      let scale = ct.random.range(.5, 1.5);
      this.jarSize = scale;
      this.scale = new PIXI.Point(this.jarSize, this.jarSize);
      // const scaleXY = (thisCopy, size) => {
      //     thisCopy.scale.x = size;
      //     thisCopy.scale.y = size;
      // }
      // scaleXY(this, this.jarSize);

      this.tint = 44;
    onstep: this.move();
    ondraw: ''
    ondestroy: ''
    texture: 63670f7a-7d5a-4565-b27c-a8829746df29
    extends:
      ctype: jarGroup
    uid: a7ac1a92-1e08-4e9d-a54d-902a699c84c3
    lastmod: 1605485723593
sounds: []
styles:
  - name: GameTimer
    uid: 14b50c35-209c-4533-bd1e-5ff476d6813e
    origname: s5ff476d6813e
    font:
      family: sans-serif
      size: 17
      weight: 400
      italic: false
      halign: center
    lastmod: 1605404803717
    fill:
      type: '0'
      color: '#5E5E5E'
rooms:
  - name: LidMatching
    oncreate: >-
      console.log("Created the lidmatching room");



      let initLids = 60;

      const initialTime = 120000

      let holdingLid = false;


      // TODO setup timers

      this.gameTimer = new CtTimer(initialTime, 'gameTimer')

      this.gameTimer.then( () => {
          console.log("Game over—timer ran out " + initialTime);
      });


      // Setup UI elements

      this.gameTimerText = (t) => {
          return `Game time: ${Math.round(t/1000)} s`
      }


      // Boundaries for random coordinates

      let xMin = 70;

      let xMax = 750;

      let yMin = 50;

      let yMax = 550;

      // must make matching lids so...

      let initJars = 5

      while (initJars > 0) {
          let newCopy = ct.types.copy('Jar', xMin, initJars * 100);
          initJars -= 1;
          newCopy.zIndex = -10;
      }


      // Make a bunch of lids and randomly place them in the map

      while (initLids > 0) {
          let newCoords = ct.random.coord();
          // Regenerate random coord if we are out of bounds
          if ((newCoords[0] <= xMin + 50) || (newCoords[0] >= xMax) || (newCoords[1] <= yMin ) || (newCoords[1] >= yMax)) {
              newCoords = ct.random.coord();
          } else {
              let newLid = ct.types.copy('Lid', newCoords[0], newCoords[1]);
              initLids -= 1;
          }
      }


      this.gameTimerLabel = new
      PIXI.Text(this.gameTimerText(this.gameTimer.timeLeft)),
      ct.styles.get('GameTimer');

      this.addChild(this.gameTimerLabel);

      this.gameTimerLabel.x = 10;

      this.gameTimerLabel.y = 10;
    onstep: >
      // console.log("game timer var: " + gameTimer.time + "• timeRemaining: " +
      this.timeRemaining);

      // console.log(this.gameTimer);
    ondraw: |-
      // Update the text
      this.gameTimerLabel.text = this.gameTimerText(this.gameTimer.timeLeft);
    onleave: ''
    width: 800
    height: 600
    backgrounds: []
    copies: []
    tiles:
      - depth: -10
        tiles: []
        extends: {}
    uid: f7c0c948-cec8-4b6d-8390-6dd99dd9d783
    thumbnail: 6dd99dd9d783
    extends: {}
    gridX: 0
    gridY: 0
    backgroundColor: '#EBEBEB'
    lastmod: 1605463646505
actions:
  - name: DragLid
    methods:
      - code: mouse.Left
emitterTandems: []
scripts: []
starting: 0
settings:
  authoring:
    author: ''
    site: ''
    title: GJ67-test-12312312
    version:
      - 0
      - 0
      - 0
    versionPostfix: ''
  rendering:
    usePixiLegacy: true
    maxFPS: 60
    pixelatedrender: false
    highDensity: true
    desktopMode: maximized
  export:
    windows: true
    linux: true
    mac: true
    functionWrap: false
    codeModifier: none
  branding:
    icon: -1
    accent: '#446adb'
    invertPreloaderScheme: true
  fps: 30
fonts: []
styletick: .nan
palette: []
